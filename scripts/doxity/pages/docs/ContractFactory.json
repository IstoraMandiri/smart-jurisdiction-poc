{"author":"Chris Hitchcott","title":"Example Contract Factory","fileName":"/contracts/ContractFactory.sol","name":"ContractFactory","abi":[{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32"},{"name":"_address","type":"address"}],"name":"getWhitelisted","outputs":[{"name":"_value","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"deployments","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxInitialBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_maxInitialBalance","type":"uint256"}],"name":"configureMaxInitialBalance","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_initialBalance","type":"uint256"}],"name":"deploy","outputs":[{"name":"_contract","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerWhitelist","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_traderWhitelist","type":"address"}],"name":"configureTraderWhitelist","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"traderWhitelist","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"whitelists","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_contract","type":"address"},{"indexed":true,"name":"_manager","type":"address"}],"name":"Deploy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"source":"pragma solidity ^0.4.16;\n\nimport './TokenTemplate.sol';\n\n/// @title Example Contract Factory\n/// @notice Allows managers to deploy and configure a specific contract with constraints defined by admin\n/// @author Chris Hitchcott\n\ncontract ContractFactory is Ownable, HasWhitelists {\n\n  event Deploy(address indexed _contract, address indexed _manager);\n\n  uint256 public maxInitialBalance = 0;\n  address public traderWhitelist;\n  mapping (address => address) public deployments;\n\n  /// @notice Sets the maximum initial balance for new deployments\n  /// @dev Can only be called by admin\n  /// @param _maxInitialBalance New maximum possible balance\n  /// @return _success Transaction was successful\n  function configureMaxInitialBalance (uint256 _maxInitialBalance) public onlyOwner returns (bool _success) {\n    maxInitialBalance = _maxInitialBalance;\n    return true;\n  }\n\n  /// @notice Sets the address for the whitelist of new deployments\n  /// @dev Can only be called by admin\n  /// @param _traderWhitelist Address of whitelist contract\n  /// @return _success Transaction was successful\n  function configureTraderWhitelist (address _traderWhitelist) public onlyOwner returns (bool _success) {\n    traderWhitelist = _traderWhitelist;\n    return true;\n  }\n\n  /// @notice Deploys a new ERC20 Contract\n  /// @dev Can only be called by managers\n  /// @param _initialBalance Initial token balance of sender\n  /// @return _contract Address of deployed contract\n  function deploy (uint256 _initialBalance) public isWhitelisted(\"manager\", msg.sender) returns (address _contract) {\n    // validate configuration\n    require(_initialBalance <= maxInitialBalance);\n    // deploy the new token, pass the owner (admin) address\n    address tokenAddress = new TokenTemplate();\n    TokenTemplate token = TokenTemplate(tokenAddress);\n    // configure the new token\n    token.registerWhitelist(\"trader\", traderWhitelist);\n    token.mint(msg.sender, _initialBalance);\n    token.finishMinting();\n    // transfer ownership to the admin\n    token.transferOwnership(owner);\n    // register the deployment\n    deployments[tokenAddress] = msg.sender;\n    // emit event\n    Deploy(tokenAddress, msg.sender);\n    return tokenAddress;\n  }\n\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32","description":"The name of the whitelist"},{"name":"_address","type":"address","description":"The address to query"}],"name":"getWhitelisted","outputs":[{"name":"_value","type":"bool","description":"Whether the user is whitelisted"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Returns true or false if whitelist exists, throws if whitelist is not registered","return":"_value Whether the user is whitelisted","notice":"Returns whether an address is whitelisted or not","signature":"getWhitelisted(bytes32,address)","signatureHash":"0e2d20a0"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"deployments","payable":false,"stateMutability":"view","type":"function","signature":"deployments(address)","signatureHash":"316b3739"},{"constant":true,"inputs":[],"name":"maxInitialBalance","payable":false,"stateMutability":"view","type":"function","signature":"maxInitialBalance()","signatureHash":"5a698325"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"_maxInitialBalance","type":"uint256","description":"New maximum possible balance"}],"name":"configureMaxInitialBalance","outputs":[{"name":"_success","type":"bool","description":"Transaction was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called by admin","return":"_success Transaction was successful","notice":"Sets the maximum initial balance for new deployments","signature":"configureMaxInitialBalance(uint256)","signatureHash":"9de2cea8"},{"constant":false,"inputs":[{"name":"_initialBalance","type":"uint256","description":"Initial token balance of sender"}],"name":"deploy","outputs":[{"name":"_contract","type":"address","description":"Address of deployed contract"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called by managers","return":"_contract Address of deployed contract","notice":"Deploys a new ERC20 Contract","signature":"deploy(uint256)","signatureHash":"a5e38751"},{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32","description":"The name of the whitelist"},{"name":"_address","type":"address","description":"The contract address of the whitelist"}],"name":"registerWhitelist","outputs":[{"name":"_success","type":"bool","description":"Transaction was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called by admin","return":"_success Transaction was successful","notice":"Register (or unregister) a new whitelist","signature":"registerWhitelist(bytes32,address)","signatureHash":"ba7c94aa"},{"constant":false,"inputs":[{"name":"_traderWhitelist","type":"address","description":"Address of whitelist contract"}],"name":"configureTraderWhitelist","outputs":[{"name":"_success","type":"bool","description":"Transaction was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called by admin","return":"_success Transaction was successful","notice":"Sets the address for the whitelist of new deployments","signature":"configureTraderWhitelist(address)","signatureHash":"bed8de39"},{"constant":true,"inputs":[],"name":"traderWhitelist","payable":false,"stateMutability":"view","type":"function","signature":"traderWhitelist()","signatureHash":"cf3c0eb4"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"whitelists","payable":false,"stateMutability":"view","type":"function","signature":"whitelists(bytes32)","signatureHash":"d7ec30db"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to."}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_contract","type":"address"},{"indexed":true,"name":"_manager","type":"address"}],"name":"Deploy","type":"event","signature":"Deploy(address,address)","signatureHash":"b1a29087"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"}]}
