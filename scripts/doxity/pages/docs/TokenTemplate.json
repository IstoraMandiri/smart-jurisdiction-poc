{"author":"Chris Hitchcott","title":"Controlled Token","fileName":"/contracts/TokenTemplate.sol","name":"TokenTemplate","abi":[{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32"},{"name":"_address","type":"address"}],"name":"getWhitelisted","outputs":[{"name":"_value","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_value","type":"uint256"}],"name":"overrideBalance","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32"},{"name":"_address","type":"address"}],"name":"registerWhitelist","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"whitelists","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}],"source":"pragma solidity ^0.4.16;\n\nimport 'zeppelin-solidity/contracts/token/MintableToken.sol';\nimport 'zeppelin-solidity/contracts/lifecycle/Pausable.sol';\n\nimport './HasWhitelists.sol';\n\n// other interesting token: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\n\n/// @title Controlled Token\n/// @notice Extended ERC20 Token with whitelist, admin overrides & pausable\n/// @author Chris Hitchcott\n\ncontract TokenTemplate is MintableToken, Pausable, HasWhitelists {\n\n  /// @notice transfer token for a specified address\n  /// @dev Can only be called to and from whitelisted traders, cannot be used when paused\n  /// @param _to The address to transfer to.\n  /// @param _value The amount to be transferred.\n  function transfer(address _to, uint256 _value) public whenNotPaused isWhitelisted(\"trader\", _to) isWhitelisted(\"trader\", msg.sender) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  /// @notice Transfer tokens from one address to another\n  /// @dev Sender must be approved, can only be called to, from and by whitelisted traders, cannot be used when paused\n  /// @param _from address The address which you want to send tokens from\n  /// @param _to address The address which you want to transfer to\n  /// @param _value uint256 the amount of tokens to be transferred\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused isWhitelisted(\"trader\", msg.sender) isWhitelisted(\"trader\", _to) isWhitelisted(\"trader\", _from) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /// @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n  /// @dev Cannot be used when paused\n  /// @param _spender address The address which will spend the funds.\n  /// @param _value uint256 The amount of tokens to be spent.\n  /// @return _success bool Transaction was successful\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool _success) {\n    return super.approve(_spender, _value);\n  }\n\n  /// @notice Overrides any balance\n  /// @dev Can only be called by admin\n  /// @param _address address Address to update\n  /// @param _value uint256 New value\n  /// @return _success bool Transaction was successful\n  function overrideBalance(address _address, uint256 _value) public onlyOwner returns (bool _success) {\n    balances[_address] = _value;\n    return true;\n  }\n\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"mintingFinished","payable":false,"stateMutability":"view","type":"function","signature":"mintingFinished()","signatureHash":"05d2035b"},{"constant":false,"inputs":[{"name":"_spender","type":"address","description":"address The address which will spend the funds."},{"name":"_value","type":"uint256","description":"uint256 The amount of tokens to be spent."}],"name":"approve","outputs":[{"name":"_success","type":"bool","description":"bool Transaction was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Cannot be used when paused","return":"_success bool Transaction was successful","notice":"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender","signature":"approve(address,uint256)","signatureHash":"095ea7b3"},{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32","description":"The name of the whitelist"},{"name":"_address","type":"address","description":"The address to query"}],"name":"getWhitelisted","outputs":[{"name":"_value","type":"bool","description":"Whether the user is whitelisted"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Returns true or false if whitelist exists, throws if whitelist is not registered","return":"_value Whether the user is whitelisted","notice":"Returns whether an address is whitelisted or not","signature":"getWhitelisted(bytes32,address)","signatureHash":"0e2d20a0"},{"constant":true,"inputs":[],"name":"totalSupply","payable":false,"stateMutability":"view","type":"function","signature":"totalSupply()","signatureHash":"18160ddd"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"address The address which you want to send tokens from"},{"name":"_to","type":"address","description":"address The address which you want to transfer to"},{"name":"_value","type":"uint256","description":"uint256 the amount of tokens to be transferred"}],"name":"transferFrom","payable":false,"stateMutability":"nonpayable","type":"function","details":"Sender must be approved, can only be called to, from and by whitelisted traders, cannot be used when paused","notice":"Transfer tokens from one address to another","signature":"transferFrom(address,address,uint256)","signatureHash":"23b872dd"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"called by the owner to unpause, returns to normal state","signature":"unpause()","signatureHash":"3f4ba83a"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"The address that will receive the minted tokens."},{"name":"_amount","type":"uint256","description":"The amount of tokens to mint."}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Function to mint tokens","return":"A boolean that indicates if the operation was successful.","signature":"mint(address,uint256)","signatureHash":"40c10f19"},{"constant":true,"inputs":[],"name":"paused","payable":false,"stateMutability":"view","type":"function","signature":"paused()","signatureHash":"5c975abb"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_subtractedValue","type":"uint256"}],"name":"decreaseApproval","payable":false,"stateMutability":"nonpayable","type":"function","signature":"decreaseApproval(address,uint256)","signatureHash":"66188463"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"The address to query the the balance of."}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the balance of the specified address.","return":"An uint256 representing the amount owned by the passed address.","signature":"balanceOf(address)","signatureHash":"70a08231"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Function to stop minting new tokens.","return":"True if the operation was successful.","signature":"finishMinting()","signatureHash":"7d64bcb4"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"called by the owner to pause, triggers stopped state","signature":"pause()","signatureHash":"8456cb59"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"_address","type":"address","description":"address Address to update"},{"name":"_value","type":"uint256","description":"uint256 New value"}],"name":"overrideBalance","outputs":[{"name":"_success","type":"bool","description":"bool Transaction was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called by admin","return":"_success bool Transaction was successful","notice":"Overrides any balance","signature":"overrideBalance(address,uint256)","signatureHash":"9d2648b6"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"The address to transfer to."},{"name":"_value","type":"uint256","description":"The amount to be transferred."}],"name":"transfer","payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called to and from whitelisted traders, cannot be used when paused","notice":"transfer token for a specified address","signature":"transfer(address,uint256)","signatureHash":"a9059cbb"},{"constant":false,"inputs":[{"name":"_whitelist","type":"bytes32","description":"The name of the whitelist"},{"name":"_address","type":"address","description":"The contract address of the whitelist"}],"name":"registerWhitelist","outputs":[{"name":"_success","type":"bool","description":"Transaction was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called by admin","return":"_success Transaction was successful","notice":"Register (or unregister) a new whitelist","signature":"registerWhitelist(bytes32,address)","signatureHash":"ba7c94aa"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_addedValue","type":"uint256"}],"name":"increaseApproval","payable":false,"stateMutability":"nonpayable","type":"function","notice":"approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol","signature":"increaseApproval(address,uint256)","signatureHash":"d73dd623"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"whitelists","payable":false,"stateMutability":"view","type":"function","signature":"whitelists(bytes32)","signatureHash":"d7ec30db"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"address The address which owns the funds."},{"name":"_spender","type":"address","description":"address The address which will spend the funds."}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Function to check the amount of tokens that an owner allowed to a spender.","return":"A uint256 specifying the amount of tokens still available for the spender.","signature":"allowance(address,address)","signatureHash":"dd62ed3e"},{"constant":false,"inputs":[{"name":"newOwner","type":"address","description":"The address to transfer ownership to."}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"anonymous":false,"inputs":[],"name":"Pause","type":"event","signature":"Pause()","signatureHash":"6985a022"},{"anonymous":false,"inputs":[],"name":"Unpause","type":"event","signature":"Unpause()","signatureHash":"7805862f"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event","signature":"Mint(address,uint256)","signatureHash":"0f6798a5"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event","signature":"MintFinished()","signatureHash":"ae5184fb"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event","signature":"Approval(address,address,uint256)","signatureHash":"8c5be1e5"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event","signature":"Transfer(address,address,uint256)","signatureHash":"ddf252ad"}]}
